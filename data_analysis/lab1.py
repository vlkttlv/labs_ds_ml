
def operation_with_numbers():
    while True:
        operation = input("""
–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é —Å —á–∏—Å–ª–∞–º–∏:
1 - –°–ª–æ–∂–µ–Ω–∏–µ
2 - –í—ã—á–∏—Ç–∞–Ω–∏–µ
3 - –£–º–Ω–æ–∂–µ–Ω–∏–µ
4 - –î–µ–ª–µ–Ω–∏–µ
–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏: """)
        if operation.isdigit() and (int(operation) == 1 or int(operation) == 2 or int(operation) == 3 or int(operation) == 4):
            operation = int(operation)
            while True:
                while True:
                    while True:
                        number1 = input("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ: ")
                        if number1.isdigit() and isinstance(int(number1), int):
                            number1 = int(number1)
                            break
                        else:
                            print('–í–≤–µ–¥–∏—Ç–µ –Ω–æ—Ä–º —á–∏—Å–ª–æ!')

                    while True:
                        number2 = input("–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ: ")
                        if number2.isdigit() and isinstance(int(number2), int):
                            number2 = int(number2)
                            break
                        else:
                            print('–í–≤–µ–¥–∏—Ç–µ –Ω–æ—Ä–º —á–∏—Å–ª–æ!')

                    if operation == 1:
                        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {number1 + number2}")
                        exit()
                    elif operation == 2:
                        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {number1 - number2}")
                        exit()
                    elif operation == 3:
                        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {number1 * number2}")
                        exit()
                    elif operation == 4:
                        if number2 == 0:
                            print('–ù–∞ –Ω–æ–ª—å –¥–µ–ª–∏—Ç—å –Ω–µ–ª—å–∑—è. –í–≤–µ–¥–∏ –¥—Ä—É–≥–æ–µ –≤—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ')
                            while True:
                                number2 = input("–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ: ")
                                if number2.isdigit() and isinstance(int(number2), int) and int(number2) != 0:
                                    number2 = int(number2)
                                    break
                                else:
                                    print('–í–≤–µ–¥–∏—Ç–µ –Ω–æ—Ä–º —á–∏—Å–ª–æ!')
                            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {number1 / number2}")
                            exit()
                    else:
                        print(
                            "–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä–µ–µ–∫—Ç–Ω–∞—è —Ü–∏—Ñ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ :(")
        else:
            print('–í–≤–æ–¥–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é –∞–¥–µ–∫–≤–∞—Ç–Ω–æ!')


def operation_with_matrices():
    matrix_1 = []
    matrix_2 = []
    while True:
        rows_1 = (input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –ø–µ—Ä–≤–æ–π –º–∞—Ç—Ä–∏—Ü—ã: "))
        if rows_1.isdigit() is False or isinstance(int(rows_1), int) is False:
            print('–í–≤–µ–¥–∏—Ç–µ –Ω–æ—Ä–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫')
        else:
            rows_1 = int(rows_1)
            break
    while True:
        columns_1 = (input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –ø–µ—Ä–≤–æ–π –º–∞—Ç—Ä–∏—Ü—ã: "))
        if columns_1.isdigit() is False or isinstance(int(columns_1), int) is False:
            print('–í–≤–µ–¥–∏—Ç–µ –Ω–æ—Ä–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫')
        else:
            columns_1 = int(columns_1)
            break

    print(f"–í–≤–µ–¥–∏—Ç–µ –º–∞—Ç—Ä–∏—Ü—É —Ä–∞–∑–º–µ—Ä–æ–º {rows_1}x{columns_1} —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")

    for i in range(rows_1):
        while True:
            row = input(f"–°—Ç—Ä–æ–∫–∞ {i+1}: ").split(' ')
            if all(element.isdigit() for element in row) and len(row) == columns_1:
                matrix_1.append([int(element) for element in row])
                break
            else:
                if len(row) != columns_1:
                    print("–í–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤!")
                else:
                    print("–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –Ω–æ—Ä–º–∞–ª—å–Ω–æ.")
    while True:
        rows_2 = (input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤—Ç–æ—Ä–æ–π –º–∞—Ç—Ä–∏—Ü—ã: "))
        if rows_2.isdigit() is False or isinstance(int(rows_2), int) is False:
            print('–í–≤–µ–¥–∏—Ç–µ –Ω–æ—Ä–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫')
        else:
            rows_2 = int(rows_2)
            break
    while True:
        columns_2 = (input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤—Ç–æ—Ä–æ–π –º–∞—Ç—Ä–∏—Ü—ã: "))
        if columns_2.isdigit() is False or isinstance(int(columns_2), int) is False:
            print('–í–≤–µ–¥–∏—Ç–µ –Ω–æ—Ä–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫')
        else:
            columns_2 = int(columns_2)
            break

    print(f"–í–≤–µ–¥–∏—Ç–µ –º–∞—Ç—Ä–∏—Ü—É —Ä–∞–∑–º–µ—Ä–æ–º {rows_2}x{columns_2} —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")

    for i in range(rows_2):
        while True:
            row = input(f"–°—Ç—Ä–æ–∫–∞ {i+1}: ").split(' ')
            if all(element.isdigit() for element in row) and len(row) == columns_2:
                matrix_2.append([int(element) for element in row])
                break
            else:
                if len(row) != columns_2:
                    print("–í–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤!")
                else:
                    print("–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –Ω–æ—Ä–º–∞–ª—å–Ω–æ.")

    operation = (input("""
–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é —Å –º–∞—Ç—Ä–∏—Ü–∞–º–∏:
1 - –°–ª–æ–∂–µ–Ω–∏–µ
2 - –£–º–Ω–æ–∂–µ–Ω–∏–µ
–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏: """))
    while True:
        if operation.isdigit() and (int(operation) == 1 or int(operation) == 2):
            if int(operation) == 1:
                summation_matrix(rows_1, columns_1, rows_2,
                                 columns_2, matrix_1, matrix_2)
                break
            elif int(operation) == 2:
                multiplication_matrix(rows_2, columns_1, rows_1,
                                      columns_2, matrix_1, matrix_2)
                break
        else:
            print('–í–≤–µ–¥–∏—Ç–µ –Ω–æ—Ä–º –æ–ø–µ—Ä–∞—Ü–∏—é')


def summation_matrix(rows_1, columns_1, rows_2, columns_2, matrix_1, matrix_2):

    if rows_1 == rows_2 and columns_1 == columns_2:
        sum_matrix = [[] for x in range(rows_1)]

        for i in range(rows_1):
            for j in range(columns_1):
                sum_matrix[i].append(matrix_1[i][j] + matrix_2[i][j])
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–ª–æ–∂–µ–Ω–∏—è –º–∞—Ç—Ä–∏—Ü {sum_matrix}")
    else:
        print("–î–ª—è —Å–ª–æ–∂–µ–Ω–∏—è –º–∞—Ç—Ä–∏—Ü—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞!")


def multiplication_matrix(rows_2, columns_1, rows_1, columns_2, matrix_1, matrix_2):
    if columns_1 == rows_2:
        mult_matrix = [[0]*columns_2 for x in range(rows_1)]
        for i in range(len(matrix_1)):
            for j in range(len(matrix_2[0])):
                for k in range(len(matrix_2)):
                    mult_matrix[i][j] += matrix_1[i][k]*matrix_2[k][j]

        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —É–º–Ω–æ–∂–µ–Ω–∏—è –º–∞—Ç—Ä–∏—Ü: {mult_matrix}")
    else:
        print(
            "–î–ª—è —É–º–Ω–æ–∂–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –ø–µ—Ä–≤–æ–π –º–∞—Ç—Ä–∏—Ü—ã –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å—Ç—Ä–æ–∫ –≤—Ç–æ—Ä–æ–πü•≤")